---

- name: Read K8s job info
  k8s_info:
    kind: Job
    api_version: batch/v1
    name: "{{ meta.name }}"
    namespace: "{{ meta.namespace }}"
  register: k8s_job

- block:
  - name: Update AnsibleJob status with message
    k8s_status:
      api_version: tower.ansible.com/v1alpha1
      kind: AnsibleJob
      name: "{{ meta.name }}"
      namespace: "{{ meta.namespace }}"
      status:
        message: "This job instance is already running or has reached its end state."
  - name: End play early
    meta: end_play
  when: k8s_job["resources"] is defined and (k8s_job["resources"]|length>0)

- name: Read Secret Configuration
  k8s_info:
    kind: Secret
    api_version: v1
    name: "{{ tower_auth_secret }}"
    namespace: "{{ meta.namespace }}"
  register: tower_config_secret

- name: Validate Secret Exists
  assert:
    that:
      - tower_config_secret["resources"] is defined and (tower_config_secret["resources"]|length>0)
    fail_msg: "Tower Secret must exists"

- name: Start K8s Runner Job
  k8s:
    state: present
    definition: "{{ lookup('template', 'job_definition.yml') }}"

- name: Update AnsibleJob status with K8s job info
  k8s_status:
    api_version: tower.ansible.com/v1alpha1
    kind: AnsibleJob
    name: "{{ meta.name }}"
    namespace: "{{ meta.namespace }}"
    status:
      k8sJob:
        created: true
        message: |-
          Monitor the job.batch status for more details with the following commands:
          'kubectl -n {{meta.namespace}} get job.batch/{{meta.name}}'
          'kubectl -n {{meta.namespace}} describe job.batch/{{meta.name}}'
          'kubectl -n {{meta.namespace}} logs -f job.batch/{{meta.name}}'
        namespacedName: "{{meta.namespace+'/'+meta.name}}"
        env:
          inventory: "{{ inventory | default(omit) }}"
          secretNamespacedName: "{{meta.namespace+'/'+tower_auth_secret}}"
          templateName: "{{ job_template_name }}"
          verifySSL: false
