---

name: AWX test

on:
  pull_request:
    branches: [devel, iaac-poc]

  push:
    branches: [devel,iacc-poc]

env:
  GO_VERSION: "1.17"
  OPERATOR_IMAGE: "quay.io/ansible/awx-resource-operator"
  RUNNER_IMAGE: "quay.io/ansible/awx-resource-runner"
  TOKEN_IMAGE: "quay.io/ansible/token-playbook"

jobs:
  image-build:
    runs-on: ubuntu-20.04
    name: image-build
    steps:
      - uses: actions/checkout@v3

      - name: Build operator container
        run: podman build -t ${{ env.OPERATOR_IMAGE }}:latest .

      - name: Build runner container
        run: podman build -f Dockerfile.runner -t ${{ env.RUNNER_IMAGE }}:latest

      - name: Build token generator
        run: cd test-e2e/token-container && podman build . --tag ${{ env.TOKEN_IMAGE }}:latest

      - name: archive operator image
        run: podman save ${OPERATOR_IMAGE}:latest > operator.tar

      - name: archive runner image
        run: podman save ${RUNNER_IMAGE}:latest > runner.tar

      - name: archive token image
        run: podman save ${TOKEN_IMAGE}:latest > token.tar

      - name: upload operator image
        uses: actions/upload-artifact@v3
        with:
          name: operator.tar
          path: operator.tar

      - name: upload runner image
        uses: actions/upload-artifact@v3
        with:
          name: runner.tar
          path: runner.tar

      - name: upload token image
        uses: actions/upload-artifact@v3
        with:
          name: token.tar
          path: token.tar

  kind-test:
    runs-on: ubuntu-20.04
    name: kind-test
    needs: image-build
    steps:
      - uses: actions/checkout@v3

      - name: Install the Kubectl binary
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install ./kubectl /usr/local/bin/
          kubectl version --short --client
          
      - name: Install the Kind binary
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.12.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          kind version
    
      - name: Create a Kind Cluster
        run: kind create cluster

      - name: Pull the Container Image from Artifacts
        uses: actions/download-artifact@v3
        with:
          name: operator.tar
          path: /tmp

      - name: Pull the Container Image from Artifacts
        uses: actions/download-artifact@v3
        with:
          name: runner.tar
          path: /tmp

      - name: Pull the Container Image from Artifacts
        uses: actions/download-artifact@v3
        with:
          name: token.tar
          path: /tmp

      - name: Load the Container Image into the Kind Cluster
        run: |
          kind load image-archive /tmp/operator.tar
          kind load image-archive /tmp/runner.tar
          kind load image-archive /tmp/token.tar
          NAMESPACE=awx IMG=${OPERATOR_IMAGE} make deploy

      - name: Clone and install awx operator
        run: |
          git clone https://github.com/ansible/awx-operator.git
          cp test-e2e/base-operator-install.yaml awx-operator/kustomization.yaml
          cd awx-operator
          kustomize build . | kubectl apply -f -
          cp ../test-e2e/awx-demo.yml ./awx-demo.yml
          cp ../test-e2e/awx-deploy.yaml ./kustomization.yaml
          kustomize build . | kubectl apply -f -
          kubectl wait deployment -n awx awx-operator-controller-manager --for condition=Available=True --timeout=500s

      - name: generate token
        run: |
          sleep 10
          kubectl wait awx -n awx awx-demo --for condition=Successful=true --timeout=500s
          kubectl wait deployment -n awx awx-demo --for condition=Available=True --timeout=500s
          kubectl apply -f test-e2e/token.yaml
          kubectl wait job -n awx create-token --for condition=Complete --timeout=500s

      - name: launch a job
        run: |
          kubectl apply -f test-e2e/tests/job.yaml
          kubectl wait ansiblejob -n awx demo-job --for condition=Successful=True --timeout=500s

      - name: launch a template
        run: |
          kubectl apply -f config/samples/tower_v1alpha1_jobtemplate.yaml -n awx
          kubectl wait jobtemplate -n awx jobtemplate-sample --for condition=Successful=True --timeout=500s

